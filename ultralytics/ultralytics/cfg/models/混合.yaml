# Parameters
nc: 124  # 类别数
depth_multiple: 0.33  # 深度系数（保持YOLOv8n级别）
width_multiple: 0.25  # 宽度系数（保持YOLOv8n级别）


# YOLOv8 backbone with ADown
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]    # 0-P1/2
  - [-1, 1, ADown, [128]]        # 1-P2/4 (替换原始Conv)
  - [-1, 3, C2f, [128, True]]    # 2
  - [-1, 1, ADown, [256]]        # 3-P3/8 (替换原始Conv)
  - [-1, 6, C2f, [256, True]]    # 4
  - [-1, 1, ADown, [512]]        # 5-P4/16 (替换原始Conv)
  - [-1, 6, C2f, [512, True]]    # 6
  - [-1, 1, ADown, [1024]]       # 7-P5/32 (替换原始Conv)
  - [-1, 3, C2f, [1024, True]]   # 8
  - [-1, 1, SPPF, [1024, 5]]     # 9

# Slim-Neck with VoVGSCSP and GSConv
head:
  # P5 -> P4
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 10
  - [[-1, 6], 1, Concat, [1]]   # 11 cat backbone P4 (1024+512)
  - [-1, 3, VoVGSCSP, [512]]    # 12 (输出512)

  # P4 -> P3
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 13
  - [[-1, 4], 1, Concat, [1]]   # 14 cat backbone P3 (512+256)
  - [-1, 3, VoVGSCSP, [256]]    # 15 (P3/8-small, 输出256)

  # P3 -> P4
  - [-1, 1, GSConv, [256, 3, 2]]  # 16 (下采样)
  - [[-1, 12], 1, Concat, [1]]    # 17 cat P4 (256+512)
  - [-1, 3, VoVGSCSP, [512]]      # 18 (P4/16-medium, 输出512)

  # P4 -> P5
  - [-1, 1, GSConv, [512, 3, 2]]  # 19 (下采样)
  - [[-1, 9], 1, Concat, [1]]     # 20 cat P5 (512+1024)
  - [-1, 3, VoVGSCSP, [1024]]     # 21 (P5/32-large, 输出1024)

  # Detect
  - [[15, 18, 21], 1, Detect, [nc]]  # Detect(P3, P4, P5)